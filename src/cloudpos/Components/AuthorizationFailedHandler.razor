@inject IDbContextFactory<ServerDbContext> Factory
@inject NavigationManager NavManager
@using System.Security.Claims
@using CloudInteractive.CloudPos.Contexts
@using Microsoft.EntityFrameworkCore

@if (_isChecking)
{
    <AuthorizingPage />
}
else
{
    <Error Code="403" Message="권한 없음" />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    private bool _isChecking = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var sidClaim = user.FindFirst(ClaimTypes.Sid);
            if (sidClaim != null && int.TryParse(sidClaim.Value, out var sessionId))
            {
                await using var context = await Factory.CreateDbContextAsync();
                var session= await context.Sessions
                    .AsNoTracking()
                    .FirstOrDefaultAsync(s => s.SessionId == sessionId && s.EndedAt != null);

                if (session is not null)
                {
                    if (session.State == TableSession.SessionState.Completed)
                    {
                        NavManager.NavigateTo("/customer/authorize?error=1", forceLoad: true, replace: true);
                        return;
                    }
                    
                    NavManager.NavigateTo("/customer/receipt", forceLoad: true, replace: true);
                    return; 
                }
            }
        }
        _isChecking = false;
    }
}